pipeline {
    agent any

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    nodejs('nodejs') {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Archive Build') {
            steps {
                sh 'tar -czf build.tar.gz build/'
                archiveArtifacts artifacts: 'build.tar.gz', allowEmptyArchive: false
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                tar -xzf build.tar.gz -C /var/www/html

                sudo systemctl restart nginx
                '''
            }
        }
        post {
            success {
                script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend (color: 'good', 
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                    endpoint: '{endpoint입력}', 
                    channel: '{channel입력}'
                    )
                }
            }
            failure {
                script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend (color: 'danger', 
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                    endpoint: '{endpoint입력}', 
                    channel: '{channel입력}'
                    )
                }
            }
        }
    }
}